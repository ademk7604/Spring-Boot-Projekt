server:
  port: 8081
  error:
    include-binding-errors: always
    include-message: always
    include-stacktrace: never
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/test_db
    username: root
    password: Ademk1@
    driver-class-name: com.mysql.cj.jdbc.Driver
  security:
    user:
      name: name
      password: password
  jpa:
   hibernate:
      ddl-auto: update
   show-sql: true
   # open-in-view deger defaultta true geliyor. iliski lazy yapilsa dahi view render deilene kadar veya json olusana kadar transaction acik kaliyor.
   ##open-in-view: false
   #properties:
   #hibernate:
      #enable_lazy_load_no_trans: true # unutulmus eager olarak kalmsasi gereken ama uygulamamizda layz i cekilmis olarak gozuken iliskiler JSON olusurken direk eager gibi davranacak
   database-platform: org.hibernate.dialect.MySQL8Dialect
   properties:
     format-sql: true
     '[hibernate.format_sql]': true
      #  uygulamamamiz calisiyorsa loglamaya gerek yok. hata aninda hatanin erde oldugunu bulabilmek ve yakalamak icin kullaniriz
      # loglama yaptik, : dan sonra mutlaka bosluk. alta gecip her tab onun child ini olusturur.
logging: 
  file:   
    name: log/studentapp.log
  pattern:
    file: "%d %-5level [%thread] %logger:%msg%n"  # burayi googlarak veya burdan alabilirsin. siralama level seviyesi, thread ve looger
  level:
    '[org.springframework.web]': WARN  #  warm seviyesinde tut. ve ustu. // calismamizi logladik hatalarimizi bulabiliriz burdan.
    '[org.hibernate]': INFO            #  bu ve digerini info seviyesinde tut diyorum
    '[com.tpro]': INFO
      #  hangi class ta ve method da loglama istiyorsam ordan yaparim
management:   # actuator  # arka palanda monitorlemedir. bunda canli olarak goruyoruz loglamadan farkli. aslin ikiside ayni gorevi goruyor.
  endpoints:
    web:
      exposure:
        include: ['health','loggers','env','beans']  